// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var playerInfo = PlayerInfo.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayerInfo
    {
        [JsonProperty("MembershipId")]
        public long MembershipId { get; set; }

        [JsonProperty("TeamId")]
        public long TeamId { get; set; }

        [JsonProperty("PlayerId")]
        public long PlayerId { get; set; }

        [JsonProperty("PlayerName")]
        public string PlayerName { get; set; }

        [JsonProperty("TeamName")]
        public TeamName TeamName { get; set; }

        [JsonProperty("TeamArea")]
        public TeamArea TeamArea { get; set; }

        [JsonProperty("Active")]
        public bool Active { get; set; }

        [JsonProperty("StartDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("EndDate")]
        public object EndDate { get; set; }

        [JsonProperty("Updated")]
        public DateTimeOffset Updated { get; set; }
    }

    public enum TeamArea { England };

    public enum TeamName { ArsenalFc, AstonVillaFc, BrightonHoveAlbionFc, BurnleyFc, ChelseaFc, CrystalPalaceFc, EvertonFc, FulhamFc, LeedsUnitedFc, LeicesterCityFc, LiverpoolFc, ManchesterCityFc, ManchesterUnitedFc, NewcastleUnitedFc, SheffieldUnitedFc, SouthamptonFc, TottenhamHotspurFc, WestBromwichAlbionFc, WestHamUnitedFc, WolverhamptonWanderersFc };

    public partial class PlayerInfo
    {
        public static PlayerInfo[] FromJson(string json) => JsonConvert.DeserializeObject<PlayerInfo[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PlayerInfo[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TeamAreaConverter.Singleton,
                TeamNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TeamAreaConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TeamArea) || t == typeof(TeamArea?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "England")
            {
                return TeamArea.England;
            }
            throw new Exception("Cannot unmarshal type TeamArea");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TeamArea)untypedValue;
            if (value == TeamArea.England)
            {
                serializer.Serialize(writer, "England");
                return;
            }
            throw new Exception("Cannot marshal type TeamArea");
        }

        public static readonly TeamAreaConverter Singleton = new TeamAreaConverter();
    }

    internal class TeamNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TeamName) || t == typeof(TeamName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Arsenal FC":
                    return TeamName.ArsenalFc;
                case "Aston Villa FC":
                    return TeamName.AstonVillaFc;
                case "Brighton & Hove Albion FC":
                    return TeamName.BrightonHoveAlbionFc;
                case "Burnley FC":
                    return TeamName.BurnleyFc;
                case "Chelsea FC":
                    return TeamName.ChelseaFc;
                case "Crystal Palace FC":
                    return TeamName.CrystalPalaceFc;
                case "Everton FC":
                    return TeamName.EvertonFc;
                case "Fulham FC":
                    return TeamName.FulhamFc;
                case "Leeds United FC":
                    return TeamName.LeedsUnitedFc;
                case "Leicester City FC":
                    return TeamName.LeicesterCityFc;
                case "Liverpool FC":
                    return TeamName.LiverpoolFc;
                case "Manchester City FC":
                    return TeamName.ManchesterCityFc;
                case "Manchester United FC":
                    return TeamName.ManchesterUnitedFc;
                case "Newcastle United FC":
                    return TeamName.NewcastleUnitedFc;
                case "Sheffield United FC":
                    return TeamName.SheffieldUnitedFc;
                case "Southampton FC":
                    return TeamName.SouthamptonFc;
                case "Tottenham Hotspur FC":
                    return TeamName.TottenhamHotspurFc;
                case "West Bromwich Albion FC":
                    return TeamName.WestBromwichAlbionFc;
                case "West Ham United FC":
                    return TeamName.WestHamUnitedFc;
                case "Wolverhampton Wanderers FC":
                    return TeamName.WolverhamptonWanderersFc;
            }
            throw new Exception("Cannot unmarshal type TeamName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TeamName)untypedValue;
            switch (value)
            {
                case TeamName.ArsenalFc:
                    serializer.Serialize(writer, "Arsenal FC");
                    return;
                case TeamName.AstonVillaFc:
                    serializer.Serialize(writer, "Aston Villa FC");
                    return;
                case TeamName.BrightonHoveAlbionFc:
                    serializer.Serialize(writer, "Brighton & Hove Albion FC");
                    return;
                case TeamName.BurnleyFc:
                    serializer.Serialize(writer, "Burnley FC");
                    return;
                case TeamName.ChelseaFc:
                    serializer.Serialize(writer, "Chelsea FC");
                    return;
                case TeamName.CrystalPalaceFc:
                    serializer.Serialize(writer, "Crystal Palace FC");
                    return;
                case TeamName.EvertonFc:
                    serializer.Serialize(writer, "Everton FC");
                    return;
                case TeamName.FulhamFc:
                    serializer.Serialize(writer, "Fulham FC");
                    return;
                case TeamName.LeedsUnitedFc:
                    serializer.Serialize(writer, "Leeds United FC");
                    return;
                case TeamName.LeicesterCityFc:
                    serializer.Serialize(writer, "Leicester City FC");
                    return;
                case TeamName.LiverpoolFc:
                    serializer.Serialize(writer, "Liverpool FC");
                    return;
                case TeamName.ManchesterCityFc:
                    serializer.Serialize(writer, "Manchester City FC");
                    return;
                case TeamName.ManchesterUnitedFc:
                    serializer.Serialize(writer, "Manchester United FC");
                    return;
                case TeamName.NewcastleUnitedFc:
                    serializer.Serialize(writer, "Newcastle United FC");
                    return;
                case TeamName.SheffieldUnitedFc:
                    serializer.Serialize(writer, "Sheffield United FC");
                    return;
                case TeamName.SouthamptonFc:
                    serializer.Serialize(writer, "Southampton FC");
                    return;
                case TeamName.TottenhamHotspurFc:
                    serializer.Serialize(writer, "Tottenham Hotspur FC");
                    return;
                case TeamName.WestBromwichAlbionFc:
                    serializer.Serialize(writer, "West Bromwich Albion FC");
                    return;
                case TeamName.WestHamUnitedFc:
                    serializer.Serialize(writer, "West Ham United FC");
                    return;
                case TeamName.WolverhamptonWanderersFc:
                    serializer.Serialize(writer, "Wolverhampton Wanderers FC");
                    return;
            }
            throw new Exception("Cannot marshal type TeamName");
        }

        public static readonly TeamNameConverter Singleton = new TeamNameConverter();
    }
}
